import unittest
from tetris import processLine

class TestTetris(unittest.TestCase):
    
    def test_empty_action(self):
        """
        Test that an empty action sequence results in no height
        """

        actionSequence = []
        resultingHeight = processLine(actionSequence)
        self.assertEqual(resultingHeight, 0)

    def test_long_action(self):
        """
        Test that a long action sequence does not throw an issue
        """

        actionSequence = ["Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0","Q0"]
        resultingHeight = processLine(actionSequence)
        self.assertEqual(resultingHeight, 3000)

    def test_file_example1(self):
        """
        Test for the examples given in the guidelines
        """

        actionSequence = ["I0","I4","Q8"]
        resultingHeight = processLine(actionSequence)
        self.assertEqual(resultingHeight, 1)
        
    def test_file_example2(self):
        """
        Test for the examples given in the guidelines
        """

        actionSequence = ["T1","Z3","I4"]
        resultingHeight = processLine(actionSequence)
        self.assertEqual(resultingHeight, 4)
        
    def test_file_example3(self):
        """
        Test for the examples given in the guidelines
        """

        actionSequence = ["Q0","I2","I6","I0","I6","I6","Q2","Q4"]
        resultingHeight = processLine(actionSequence)
        self.assertEqual(resultingHeight, 3)


unittest.main()